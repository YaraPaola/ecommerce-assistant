
import { GoogleGenAI, Modality } from "@google/genai";
import { ImageFile } from "../types";

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

// Helper function to convert AVIF/WebP images to JPEG
const convertImageToJPEG = async (image: ImageFile): Promise<{ base64: string; mimeType: string }> => {
    // If already a supported format, return as-is
    if (image.mimeType !== 'image/avif' && image.mimeType !== 'image/webp') {
        return { base64: image.base64, mimeType: image.mimeType };
    }

    try {
        const img = new Image();
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        await new Promise((resolve, reject) => {
            img.onload = () => {
                canvas.width = img.width;
                canvas.height = img.height;
                ctx?.drawImage(img, 0, 0);
                resolve(null);
            };
            img.onerror = reject;
            img.src = `data:${image.mimeType};base64,${image.base64}`;
        });
        
        const jpegData = canvas.toDataURL('image/jpeg', 0.9);
        const base64 = jpegData.split(',')[1];
        
        return { base64, mimeType: 'image/jpeg' };
    } catch (error) {
        console.error('Failed to convert image format:', error);
        throw new Error('Unable to convert image format. Please try with a different image.');
    }
};

export const enhanceImage = async (image: ImageFile, prompt: string, size: string): Promise<ImageFile> => {
    try {
        // Convert AVIF/WebP to JPEG if needed
        const { base64, mimeType } = await convertImageToJPEG(image);
        
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image',
            contents: {
                parts: [
                    {
                        inlineData: {
                            data: base64,
                            mimeType: mimeType,
                        },
                    },
                    {
                        text: `Your primary goal is to generate an image with an exact aspect ratio of ${size}.

Within that ${size} frame, your second task is to replace the background of the provided product image based on the following prompt.

CRITICAL RULES:
1.  **Aspect Ratio:** The final output image's aspect ratio MUST BE exactly ${size}. This is the most important instruction. Do not deviate. Add background padding if necessary to meet this ratio.
2.  **Product Integrity:** Do NOT change the product in the image. Its appearance, shape, lighting, and texture must remain completely unaltered. ONLY change the background. Do NOT stretch, crop, or distort the original product to make it fit the new aspect ratio.

Background Prompt: "${prompt}"`,
                    },
                ],
            },
            config: {
                responseModalities: [Modality.IMAGE],
            },
        });

        const imagePart = response.candidates?.[0]?.content?.parts.find(part => part.inlineData);

        if (imagePart?.inlineData) {
            return {
                id: crypto.randomUUID(),
                name: `enhanced_${size}_${image.name}`,
                base64: imagePart.inlineData.data,
                mimeType: imagePart.inlineData.mimeType,
                selected: true,
            };
        } else {
            throw new Error("No image was generated by the model.");
        }
    } catch (error) {
        console.error("Error enhancing image:", error);
        if (error instanceof Error) {
            throw new Error(`Gemini API error: ${error.message}`);
        }
        throw new Error("An unknown error occurred during image enhancement.");
    }
};

export const createImageMontage = async (images: ImageFile[], prompt: string, size: string): Promise<ImageFile> => {
    if (images.length < 2) {
        throw new Error("At least two images are required to create a montage.");
    }

    try {
        // Convert all images to JPEG if needed
        const convertedImages = await Promise.all(images.map(img => convertImageToJPEG(img)));
        
        const imageParts = convertedImages.map(({ base64, mimeType }) => ({
            inlineData: {
                data: base64,
                mimeType: mimeType,
            },
        }));

        const textPart = {
            text: `Your primary goal is to generate a single product montage image with an exact aspect ratio of ${size}.

Within that ${size} frame, your second task is to combine all products from the input images into one new, cohesive image, placed on a new background described in the prompt below.

CRITICAL INSTRUCTIONS:
1.  **Aspect Ratio:** The final output image's aspect ratio MUST BE exactly ${size}. This is the most important instruction.
2.  **Product Integrity:** Do not change the products themselves. Arrange them artistically.
3.  **Cohesion:** Ensure consistent lighting, shadows, and perspective across all products to make them look like they belong in the same scene.

Background Prompt: "${prompt}"`,
        };

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image',
            contents: {
                parts: [
                    textPart,
                    ...imageParts
                ],
            },
            config: {
                responseModalities: [Modality.IMAGE],
            },
        });

        const imagePart = response.candidates?.[0]?.content?.parts.find(part => part.inlineData);

        if (imagePart?.inlineData) {
            return {
                id: crypto.randomUUID(),
                name: `montage_${size}_${images.length}_images.png`,
                base64: imagePart.inlineData.data,
                mimeType: imagePart.inlineData.mimeType, // The API usually returns PNG for composites
                selected: true,
            };
        } else {
            throw new Error("No image was generated by the model for the montage.");
        }
    } catch (error) {
        console.error("Error creating image montage:", error);
        if (error instanceof Error) {
            throw new Error(`Gemini API error: ${error.message}`);
        }
        throw new Error("An unknown error occurred during image montage creation.");
    }
};


export const changeImageColor = async (image: ImageFile, color: string): Promise<ImageFile> => {
     try {
        // Convert AVIF/WebP to JPEG if needed
        const { base64, mimeType } = await convertImageToJPEG(image);
        
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image',
            contents: {
                parts: [
                    {
                        inlineData: {
                            data: base64,
                            mimeType: mimeType,
                        },
                    },
                    {
                        text: `Your task is to change the color of the main product in this image to '${color}'. Do not change anything else about the image, especially the background. The product itself must remain completely unaltered in its appearance, shape, lighting, or texture, except for its color. Return only the edited image.`,
                    },
                ],
            },
            config: {
                responseModalities: [Modality.IMAGE],
            },
        });

        const imagePart = response.candidates?.[0]?.content?.parts.find(part => part.inlineData);

        if (imagePart?.inlineData) {
            return {
                id: crypto.randomUUID(),
                name: `recolored_${color.replace(/\s/g, '_')}_${image.name}`,
                base64: imagePart.inlineData.data,
                mimeType: imagePart.inlineData.mimeType,
                selected: true, // By default, the new image is selected
            };
        } else {
            throw new Error("The model did not return an image. It may have been unable to perform the color change.");
        }
    } catch (error) {
        console.error("Error changing image color:", error);
        if (error instanceof Error) {
            throw new Error(`Gemini API error: ${error.message}`);
        }
        throw new Error("An unknown error occurred while changing the image color.");
    }
};
