import { GoogleGenAI, Modality } from "@google/genai";
import { AudioFile } from "../types";

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

interface MusicGenerationParams {
    genre: string;
    mood: string;
    duration: number;
}

export const generateMusic = async ({ genre, mood, duration }: MusicGenerationParams): Promise<AudioFile> => {
    try {
        const prompt = `Generate a piece of instrumental background music. Do not include any speech or vocals. The desired genre is ${genre}, with a ${mood} mood. The track should be approximately ${duration} seconds long.`;

        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash-preview-tts",
            contents: [{ parts: [{ text: prompt }] }],
            config: {
                responseModalities: [Modality.AUDIO],
            },
        });

        const audioPart = response.candidates?.[0]?.content?.parts?.[0]?.inlineData;

        if (audioPart?.data) {
            return {
                id: crypto.randomUUID(),
                name: `${genre}_${mood}_${duration}s.wav`,
                base64: audioPart.data,
                mimeType: 'audio/pcm',
                sampleRate: 24000, // TTS model default
                numChannels: 1,      // TTS model default
            };
        } else {
            throw new Error("No audio was generated by the model.");
        }
    } catch (error) {
        console.error("Error generating music:", error);
        if (error instanceof Error) {
            throw new Error(`Gemini API error: ${error.message}`);
        }
        throw new Error("An unknown error occurred during music generation.");
    }
};
